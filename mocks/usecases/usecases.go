// Code generated by MockGen. DO NOT EDIT.
// Source: usecases.go
//
// Generated by this command:
//
//	mockgen -source=usecases.go -destination=../../mocks/usecases/usecases.go -package=mockusecases
//

// Package mockusecases is a generated GoMock package.
package mockusecases

import (
	reflect "reflect"

	entities "github.com/DKhorkov/plantsCareTelegramBot/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUseCases is a mock of UseCases interface.
type MockUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasesMockRecorder
	isgomock struct{}
}

// MockUseCasesMockRecorder is the mock recorder for MockUseCases.
type MockUseCasesMockRecorder struct {
	mock *MockUseCases
}

// NewMockUseCases creates a new mock instance.
func NewMockUseCases(ctrl *gomock.Controller) *MockUseCases {
	mock := &MockUseCases{ctrl: ctrl}
	mock.recorder = &MockUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCases) EXPECT() *MockUseCasesMockRecorder {
	return m.recorder
}

// AddGroupTitle mocks base method.
func (m *MockUseCases) AddGroupTitle(telegramID int, title string) (*entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupTitle", telegramID, title)
	ret0, _ := ret[0].(*entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGroupTitle indicates an expected call of AddGroupTitle.
func (mr *MockUseCasesMockRecorder) AddGroupTitle(telegramID, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupTitle", reflect.TypeOf((*MockUseCases)(nil).AddGroupTitle), telegramID, title)
}

// CountUserGroups mocks base method.
func (m *MockUseCases) CountUserGroups(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserGroups", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserGroups indicates an expected call of CountUserGroups.
func (mr *MockUseCasesMockRecorder) CountUserGroups(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserGroups", reflect.TypeOf((*MockUseCases)(nil).CountUserGroups), userID)
}

// CountUserPlants mocks base method.
func (m *MockUseCases) CountUserPlants(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserPlants", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserPlants indicates an expected call of CountUserPlants.
func (mr *MockUseCasesMockRecorder) CountUserPlants(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserPlants", reflect.TypeOf((*MockUseCases)(nil).CountUserPlants), userID)
}

// GetUserByTelegramID mocks base method.
func (m *MockUseCases) GetUserByTelegramID(telegramID int) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTelegramID", telegramID)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTelegramID indicates an expected call of GetUserByTelegramID.
func (mr *MockUseCasesMockRecorder) GetUserByTelegramID(telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTelegramID", reflect.TypeOf((*MockUseCases)(nil).GetUserByTelegramID), telegramID)
}

// GetUserGroups mocks base method.
func (m *MockUseCases) GetUserGroups(userID int) ([]entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", userID)
	ret0, _ := ret[0].([]entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockUseCasesMockRecorder) GetUserGroups(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockUseCases)(nil).GetUserGroups), userID)
}

// GetUserPlants mocks base method.
func (m *MockUseCases) GetUserPlants(userID int) ([]entities.Plant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPlants", userID)
	ret0, _ := ret[0].([]entities.Plant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPlants indicates an expected call of GetUserPlants.
func (mr *MockUseCasesMockRecorder) GetUserPlants(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPlants", reflect.TypeOf((*MockUseCases)(nil).GetUserPlants), userID)
}

// GetUserTemporary mocks base method.
func (m *MockUseCases) GetUserTemporary(telegramID int) (*entities.Temporary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTemporary", telegramID)
	ret0, _ := ret[0].(*entities.Temporary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTemporary indicates an expected call of GetUserTemporary.
func (mr *MockUseCasesMockRecorder) GetUserTemporary(telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTemporary", reflect.TypeOf((*MockUseCases)(nil).GetUserTemporary), telegramID)
}

// SaveUser mocks base method.
func (m *MockUseCases) SaveUser(user entities.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUseCasesMockRecorder) SaveUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUseCases)(nil).SaveUser), user)
}

// SetTemporaryStep mocks base method.
func (m *MockUseCases) SetTemporaryStep(telegramID, step int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTemporaryStep", telegramID, step)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTemporaryStep indicates an expected call of SetTemporaryStep.
func (mr *MockUseCasesMockRecorder) SetTemporaryStep(telegramID, step any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTemporaryStep", reflect.TypeOf((*MockUseCases)(nil).SetTemporaryStep), telegramID, step)
}
