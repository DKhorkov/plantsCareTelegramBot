// Code generated by MockGen. DO NOT EDIT.
// Source: cron.go
//
// Generated by this command:
//
//	mockgen -source=cron.go -destination=../../mocks/cron/cron.go -package=mockcron
//

// Package mockcron is a generated GoMock package.
package mockcron

import (
	reflect "reflect"

	interfaces "github.com/DKhorkov/plantsCareTelegramBot/internal/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockCron is a mock of Cron interface.
type MockCron struct {
	ctrl     *gomock.Controller
	recorder *MockCronMockRecorder
	isgomock struct{}
}

// MockCronMockRecorder is the mock recorder for MockCron.
type MockCronMockRecorder struct {
	mock *MockCron
}

// NewMockCron creates a new mock instance.
func NewMockCron(ctrl *gomock.Controller) *MockCron {
	mock := &MockCron{ctrl: ctrl}
	mock.recorder = &MockCronMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCron) EXPECT() *MockCronMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCron) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCronMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCron)(nil).Run))
}

// Stop mocks base method.
func (m *MockCron) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockCronMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCron)(nil).Stop))
}

// MockPreparer is a mock of Preparer interface.
type MockPreparer struct {
	ctrl     *gomock.Controller
	recorder *MockPreparerMockRecorder
	isgomock struct{}
}

// MockPreparerMockRecorder is the mock recorder for MockPreparer.
type MockPreparerMockRecorder struct {
	mock *MockPreparer
}

// NewMockPreparer creates a new mock instance.
func NewMockPreparer(ctrl *gomock.Controller) *MockPreparer {
	mock := &MockPreparer{ctrl: ctrl}
	mock.recorder = &MockPreparerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreparer) EXPECT() *MockPreparerMockRecorder {
	return m.recorder
}

// GetCallback mocks base method.
func (m *MockPreparer) GetCallback() interfaces.Callback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCallback")
	ret0, _ := ret[0].(interfaces.Callback)
	return ret0
}

// GetCallback indicates an expected call of GetCallback.
func (mr *MockPreparerMockRecorder) GetCallback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallback", reflect.TypeOf((*MockPreparer)(nil).GetCallback))
}
