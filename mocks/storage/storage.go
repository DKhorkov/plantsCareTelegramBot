// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=../../mocks/storage/main.go -package=mockstorage
//

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	reflect "reflect"

	entities "github.com/DKhorkov/plantsCareTelegramBot/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CountUserGroups mocks base method.
func (m *MockStorage) CountUserGroups(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserGroups", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserGroups indicates an expected call of CountUserGroups.
func (mr *MockStorageMockRecorder) CountUserGroups(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserGroups", reflect.TypeOf((*MockStorage)(nil).CountUserGroups), userID)
}

// CountUserPlants mocks base method.
func (m *MockStorage) CountUserPlants(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserPlants", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUserPlants indicates an expected call of CountUserPlants.
func (mr *MockStorageMockRecorder) CountUserPlants(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserPlants", reflect.TypeOf((*MockStorage)(nil).CountUserPlants), userID)
}

// CreateGroup mocks base method.
func (m *MockStorage) CreateGroup(group entities.Group) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", group)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockStorageMockRecorder) CreateGroup(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockStorage)(nil).CreateGroup), group)
}

// CreatePlant mocks base method.
func (m *MockStorage) CreatePlant(plant entities.Plant) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlant", plant)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlant indicates an expected call of CreatePlant.
func (mr *MockStorageMockRecorder) CreatePlant(plant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlant", reflect.TypeOf((*MockStorage)(nil).CreatePlant), plant)
}

// CreateTemporary mocks base method.
func (m *MockStorage) CreateTemporary(temp entities.Temporary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemporary", temp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemporary indicates an expected call of CreateTemporary.
func (mr *MockStorageMockRecorder) CreateTemporary(temp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockStorage)(nil).CreateTemporary), temp)
}

// DeleteGroup mocks base method.
func (m *MockStorage) DeleteGroup(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockStorageMockRecorder) DeleteGroup(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockStorage)(nil).DeleteGroup), id)
}

// DeletePlant mocks base method.
func (m *MockStorage) DeletePlant(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlant", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlant indicates an expected call of DeletePlant.
func (mr *MockStorageMockRecorder) DeletePlant(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlant", reflect.TypeOf((*MockStorage)(nil).DeletePlant), id)
}

// GetGroup mocks base method.
func (m *MockStorage) GetGroup(id int) (entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", id)
	ret0, _ := ret[0].(entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup.
func (mr *MockStorageMockRecorder) GetGroup(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockStorage)(nil).GetGroup), id)
}

// GetPlant mocks base method.
func (m *MockStorage) GetPlant(id int) (entities.Plant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlant", id)
	ret0, _ := ret[0].(entities.Plant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlant indicates an expected call of GetPlant.
func (mr *MockStorageMockRecorder) GetPlant(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlant", reflect.TypeOf((*MockStorage)(nil).GetPlant), id)
}

// GetTemporaryByUserID mocks base method.
func (m *MockStorage) GetTemporaryByUserID(userID int) (entities.Temporary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemporaryByUserID", userID)
	ret0, _ := ret[0].(entities.Temporary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemporaryByUserID indicates an expected call of GetTemporaryByUserID.
func (mr *MockStorageMockRecorder) GetTemporaryByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemporaryByUserID", reflect.TypeOf((*MockStorage)(nil).GetTemporaryByUserID), userID)
}

// GetUserByTelegramID mocks base method.
func (m *MockStorage) GetUserByTelegramID(telegramID int) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTelegramID", telegramID)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTelegramID indicates an expected call of GetUserByTelegramID.
func (mr *MockStorageMockRecorder) GetUserByTelegramID(telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTelegramID", reflect.TypeOf((*MockStorage)(nil).GetUserByTelegramID), telegramID)
}

// GetUserGroups mocks base method.
func (m *MockStorage) GetUserGroups(userID int) ([]entities.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGroups", userID)
	ret0, _ := ret[0].([]entities.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGroups indicates an expected call of GetUserGroups.
func (mr *MockStorageMockRecorder) GetUserGroups(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGroups", reflect.TypeOf((*MockStorage)(nil).GetUserGroups), userID)
}

// GetUserPlants mocks base method.
func (m *MockStorage) GetUserPlants(userID int) ([]entities.Plant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPlants", userID)
	ret0, _ := ret[0].([]entities.Plant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPlants indicates an expected call of GetUserPlants.
func (mr *MockStorageMockRecorder) GetUserPlants(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPlants", reflect.TypeOf((*MockStorage)(nil).GetUserPlants), userID)
}

// GroupExists mocks base method.
func (m *MockStorage) GroupExists(group entities.Group) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GroupExists", group)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GroupExists indicates an expected call of GroupExists.
func (mr *MockStorageMockRecorder) GroupExists(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GroupExists", reflect.TypeOf((*MockStorage)(nil).GroupExists), group)
}

// PlantExists mocks base method.
func (m *MockStorage) PlantExists(plant entities.Plant) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlantExists", plant)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlantExists indicates an expected call of PlantExists.
func (mr *MockStorageMockRecorder) PlantExists(plant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlantExists", reflect.TypeOf((*MockStorage)(nil).PlantExists), plant)
}

// SaveUser mocks base method.
func (m *MockStorage) SaveUser(user entities.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockStorageMockRecorder) SaveUser(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockStorage)(nil).SaveUser), user)
}

// UpdateGroup mocks base method.
func (m *MockStorage) UpdateGroup(group entities.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockStorageMockRecorder) UpdateGroup(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockStorage)(nil).UpdateGroup), group)
}

// UpdatePlant mocks base method.
func (m *MockStorage) UpdatePlant(plant entities.Plant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlant", plant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlant indicates an expected call of UpdatePlant.
func (mr *MockStorageMockRecorder) UpdatePlant(plant any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlant", reflect.TypeOf((*MockStorage)(nil).UpdatePlant), plant)
}

// UpdateTemporary mocks base method.
func (m *MockStorage) UpdateTemporary(temp entities.Temporary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemporary", temp)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTemporary indicates an expected call of UpdateTemporary.
func (mr *MockStorageMockRecorder) UpdateTemporary(temp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemporary", reflect.TypeOf((*MockStorage)(nil).UpdateTemporary), temp)
}
