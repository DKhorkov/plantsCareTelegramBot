version: '3'

tasks:
  docker_network:
    desc: "Create docker network for project."
    aliases:
      - network
    cmd: sudo docker network create plants_care_bot_network

  prod:
    desc: "Run application and it's dependencies for production."
    cmds:
      - task: create_logs_folder
      - task: prepare_env_file_prod
      - task: docker_build_prod
      - task: docker_run_prod
      - task: migrate

  local:
    desc: "Run application dependencies for local launch."
    cmds:
      - task: create_logs_folder
      - task: prepare_env_file_local
      - task: docker_build_local
      - task: docker_run_local
      - task: migrate

  create_postgres_folders:
    desc: "Create postgres folders for other tasks purposes."
    internal: true
    dir: ../
    cmds:
      - mkdir -p postgres_data
      - mkdir -p postgres_backups

  create_logs_folder:
    desc: "Create logs folder for docker volume purposes."
    internal: true
    dir: ../
    cmds:
      - mkdir -p logs

  prepare_env_file_prod:
    desc: "Prepare .env file for production."
    internal: true
    dir: ../
    cmds:
      - cp .env.example .env
      - cp .env build/package/prod/.env

  prepare_env_file_local:
    desc: "Prepare .env file for local launch."
    internal: true
    dir: ../
    cmds:
      - cp .env.local .env
      - cp .env build/package/local/.env

  docker_build_prod:
    desc: "Build docker container for production."
    aliases:
      - build_prod
    cmd: sudo docker compose -f ../build/package/prod/docker-compose.yml build

  docker_run_prod:
    desc: "Launch docker container for production."
    aliases:
      - run_prod
    cmd: sudo docker compose -f ../build/package/prod/docker-compose.yml up -d

  docker_build_local:
    desc: "Build docker container for local launch."
    aliases:
      - build_local
    cmd: sudo docker compose -f ../build/package/local/docker-compose.yml build

  docker_run_local:
    desc: "Launch docker container for local launch."
    aliases:
      - run_local
    cmd: sudo docker compose -f ../build/package/local/docker-compose.yml up -d

  docker_stop:
    desc: "Stop all docker containers."
    aliases:
      - stop
    cmd: sudo docker stop $(sudo docker ps -a -q)

  docker_clean:
    desc: "Clean docker containers, images and volumes."
    cmd: sudo docker system prune -a --volumes

  clean_up:
    desc: "Clean up all folders, docker volumes, images and containers."
    dir: ../
    aliases:
      - clean
    cmds:
      - sudo rm -rf logs/
      - sudo rm -rf coverage/
      - sudo rm -rf build/package/prod/.env
      - sudo rm -rf build/package/local/.env
      - sudo rm -rf postgres_data/
      - sudo rm -rf postgres_backups/
      - task: docker_clean

  setup_proto:
    desc: "Install all go-proto requirements."
    aliases:
      - setup
    cmds:
      - sudo snap install protobuf --classic
      - go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
      - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      - export PATH="$PATH:$(go env GOPATH)/bin"
      - task: create_protobuf_folders

  create_protobuf_folders:
    desc: "Create folders structure for protobuf usage."
    internal: true
    dir: ../
    cmds:
      - mkdir -p api/protobuf/protofiles
      - mkdir -p api/protobuf/generated/go

  grpc_generate:
    desc: "Generate code from .proto files."
    aliases:
      - gen
      - generate
      - grpc
    dir: ../
    cmds:
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/masters.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative --experimental_allow_proto3_optional
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/categories.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative --experimental_allow_proto3_optional
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/tags.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative --experimental_allow_proto3_optional
      - protoc --proto_path=api/protobuf/protofiles ./api/protobuf/protofiles/toys/toys.proto --go_out=./api/protobuf/generated/go --go_opt=paths=source_relative --go-grpc_out=./api/protobuf/generated/go --go-grpc_opt=paths=source_relative --experimental_allow_proto3_optional

  tests:
    desc: "Run tests and save coverage to coverage folder."
    aliases:
      - test
    dir: ../
    cmds:
      - task: create_postgres_folders
      - sudo chmod -R 777 postgres_data
      - sudo chmod -R 777 postgres_backups
      - mkdir -p ./coverage
      - |
        printf "integration={{.integration}}\n\n"  # View flag value
        if [ "{{.integration}}" == "true" ]; then
          go test -v -shuffle=on -coverprofile ./coverage/coverage.out -coverpkg=$(go list ./... | grep -v -F -f .coverignore | paste -sd, -) ./... -tags=integration
        else
          go test -v -shuffle=on -coverprofile ./coverage/coverage.out -coverpkg=$(go list ./... | grep -v -F -f .coverignore | paste -sd, -) ./...
        fi
      - go tool cover -html ./coverage/coverage.out -o ./coverage/coverage.html
    vars:
      integration:
        sh: echo "${integration:-false}"  # false by default

  benchmarks:
    desc: "Run benchmarks."
    aliases:
      - bench
    dir: ../
    cmd: go test -v ./... -bench=. -run=xxx -benchmem >> bench.txt

  linters:
    desc: "Run linters."
    aliases:
      - lint
    dir: ../
    cmds:
      - task: create_postgres_folders
      - sudo chmod -R 777 postgres_data
      - sudo chmod -R 777 postgres_backups
      - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
      - export PATH=$PATH:$(go env GOPATH)/bin
      - golangci-lint run -v --fix

  makemigrations:
    desc: "Create migration file with provided name."
    requires: # Make sure these variables are set before running
      vars: [ NAME ]
    vars:
      DIR: ./migrations
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} create {{.NAME}} sql

  migrate:
    desc: "Apply all available migrations."
    aliases:
      - create_database
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$DB_OUTER_HOST:$DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} up

  migrate_to:
    desc: "Migrate up to a specific version."
    requires:
      vars: [ VERSION ]
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$DB_OUTER_HOST:$DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} up-to {{.VERSION}}

  downgrade_to:
    desc: "Rollback migrations to a specific version."
    requires:
      vars: [ VERSION ]
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$DB_OUTER_HOST:$DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} down-to {{.VERSION}}

  downgrade_to_base:
    desc: "Rollback all migrations (careful!)."
    aliases:
      - drop_tables
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$DB_OUTER_HOST:$DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} down-to 0

  migrations_status:
    desc: "Print status of all migrations."
    aliases:
      - status
    dotenv:
      - .env
    vars:
      DIR: ./migrations
      DRIVER: $POSTGRES_DRIVER
      DATABASE_URL: "postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$DB_OUTER_HOST:$DB_OUTER_PORT/$POSTGRES_DB"
    dir: ../
    cmds:
      - go install github.com/pressly/goose/v3/cmd/goose@latest
      - goose -dir {{.DIR}} {{.DRIVER}} {{.DATABASE_URL}} status

  upload_docker_image:
    desc: "Uploads docker image to dockerhub."
    aliases:
      - upload
    dir: ../
    cmds:
      - task: prepare_env_file_prod
      - task: docker_build_prod
      - sudo docker tag plants_care_bot d3m0s/plants_care_bot
      - sudo docker push d3m0s/plants_care_bot
